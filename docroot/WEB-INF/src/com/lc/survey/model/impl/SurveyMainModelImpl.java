/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lc.survey.model.impl;

import com.lc.survey.model.SurveyMain;
import com.lc.survey.model.SurveyMainModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SurveyMain service. Represents a row in the &quot;lc_SurveyMain&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lc.survey.model.SurveyMainModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SurveyMainImpl}.
 * </p>
 *
 * @author kevin
 * @see SurveyMainImpl
 * @see com.lc.survey.model.SurveyMain
 * @see com.lc.survey.model.SurveyMainModel
 * @generated
 */
public class SurveyMainModelImpl extends BaseModelImpl<SurveyMain>
	implements SurveyMainModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a survey main model instance should use the {@link com.lc.survey.model.SurveyMain} interface instead.
	 */
	public static final String TABLE_NAME = "lc_SurveyMain";
	public static final Object[][] TABLE_COLUMNS = {
			{ "surveyMainId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.CLOB },
			{ "epilog", Types.CLOB },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "needAuth", Types.BOOLEAN },
			{ "calculateScore", Types.BOOLEAN },
			{ "viewAnswer", Types.BOOLEAN },
			{ "color", Types.VARCHAR },
			{ "creatorId", Types.BIGINT },
			{ "modifierId", Types.BIGINT },
			{ "createDate", Types.BIGINT },
			{ "modifiedDate", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table lc_SurveyMain (surveyMainId LONG not null primary key,title VARCHAR(200) null,description TEXT null,epilog TEXT null,startDate DATE null,endDate DATE null,needAuth BOOLEAN,calculateScore BOOLEAN,viewAnswer BOOLEAN,color VARCHAR(75) null,creatorId LONG,modifierId LONG,createDate LONG,modifiedDate LONG)";
	public static final String TABLE_SQL_DROP = "drop table lc_SurveyMain";
	public static final String ORDER_BY_JPQL = " ORDER BY surveyMain.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY lc_SurveyMain.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lc.survey.model.SurveyMain"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lc.survey.model.SurveyMain"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lc.survey.model.SurveyMain"),
			true);
	public static long CREATORID_COLUMN_BITMASK = 1L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lc.survey.model.SurveyMain"));

	public SurveyMainModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _surveyMainId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSurveyMainId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _surveyMainId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SurveyMain.class;
	}

	@Override
	public String getModelClassName() {
		return SurveyMain.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("surveyMainId", getSurveyMainId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("epilog", getEpilog());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("needAuth", getNeedAuth());
		attributes.put("calculateScore", getCalculateScore());
		attributes.put("viewAnswer", getViewAnswer());
		attributes.put("color", getColor());
		attributes.put("creatorId", getCreatorId());
		attributes.put("modifierId", getModifierId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long surveyMainId = (Long)attributes.get("surveyMainId");

		if (surveyMainId != null) {
			setSurveyMainId(surveyMainId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String epilog = (String)attributes.get("epilog");

		if (epilog != null) {
			setEpilog(epilog);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Boolean needAuth = (Boolean)attributes.get("needAuth");

		if (needAuth != null) {
			setNeedAuth(needAuth);
		}

		Boolean calculateScore = (Boolean)attributes.get("calculateScore");

		if (calculateScore != null) {
			setCalculateScore(calculateScore);
		}

		Boolean viewAnswer = (Boolean)attributes.get("viewAnswer");

		if (viewAnswer != null) {
			setViewAnswer(viewAnswer);
		}

		String color = (String)attributes.get("color");

		if (color != null) {
			setColor(color);
		}

		Long creatorId = (Long)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Long modifierId = (Long)attributes.get("modifierId");

		if (modifierId != null) {
			setModifierId(modifierId);
		}

		Long createDate = (Long)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedDate = (Long)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getSurveyMainId() {
		return _surveyMainId;
	}

	@Override
	public void setSurveyMainId(long surveyMainId) {
		_surveyMainId = surveyMainId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getEpilog() {
		if (_epilog == null) {
			return StringPool.BLANK;
		}
		else {
			return _epilog;
		}
	}

	@Override
	public void setEpilog(String epilog) {
		_epilog = epilog;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public Boolean getNeedAuth() {
		return _needAuth;
	}

	@Override
	public void setNeedAuth(Boolean needAuth) {
		_needAuth = needAuth;
	}

	@Override
	public Boolean getCalculateScore() {
		return _calculateScore;
	}

	@Override
	public void setCalculateScore(Boolean calculateScore) {
		_calculateScore = calculateScore;
	}

	@Override
	public Boolean getViewAnswer() {
		return _viewAnswer;
	}

	@Override
	public void setViewAnswer(Boolean viewAnswer) {
		_viewAnswer = viewAnswer;
	}

	@Override
	public String getColor() {
		if (_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		_color = color;
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		_columnBitmask |= CREATORID_COLUMN_BITMASK;

		if (!_setOriginalCreatorId) {
			_setOriginalCreatorId = true;

			_originalCreatorId = _creatorId;
		}

		_creatorId = creatorId;
	}

	public long getOriginalCreatorId() {
		return _originalCreatorId;
	}

	@Override
	public long getModifierId() {
		return _modifierId;
	}

	@Override
	public void setModifierId(long modifierId) {
		_modifierId = modifierId;
	}

	@Override
	public long getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(long createDate) {
		_createDate = createDate;
	}

	@Override
	public long getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(long modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SurveyMain.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SurveyMain toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SurveyMain)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SurveyMainImpl surveyMainImpl = new SurveyMainImpl();

		surveyMainImpl.setSurveyMainId(getSurveyMainId());
		surveyMainImpl.setTitle(getTitle());
		surveyMainImpl.setDescription(getDescription());
		surveyMainImpl.setEpilog(getEpilog());
		surveyMainImpl.setStartDate(getStartDate());
		surveyMainImpl.setEndDate(getEndDate());
		surveyMainImpl.setNeedAuth(getNeedAuth());
		surveyMainImpl.setCalculateScore(getCalculateScore());
		surveyMainImpl.setViewAnswer(getViewAnswer());
		surveyMainImpl.setColor(getColor());
		surveyMainImpl.setCreatorId(getCreatorId());
		surveyMainImpl.setModifierId(getModifierId());
		surveyMainImpl.setCreateDate(getCreateDate());
		surveyMainImpl.setModifiedDate(getModifiedDate());

		surveyMainImpl.resetOriginalValues();

		return surveyMainImpl;
	}

	@Override
	public int compareTo(SurveyMain surveyMain) {
		int value = 0;

		if (getModifiedDate() < surveyMain.getModifiedDate()) {
			value = -1;
		}
		else if (getModifiedDate() > surveyMain.getModifiedDate()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SurveyMain)) {
			return false;
		}

		SurveyMain surveyMain = (SurveyMain)obj;

		long primaryKey = surveyMain.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SurveyMainModelImpl surveyMainModelImpl = this;

		surveyMainModelImpl._originalCreatorId = surveyMainModelImpl._creatorId;

		surveyMainModelImpl._setOriginalCreatorId = false;

		surveyMainModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SurveyMain> toCacheModel() {
		SurveyMainCacheModel surveyMainCacheModel = new SurveyMainCacheModel();

		surveyMainCacheModel.surveyMainId = getSurveyMainId();

		surveyMainCacheModel.title = getTitle();

		String title = surveyMainCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			surveyMainCacheModel.title = null;
		}

		surveyMainCacheModel.description = getDescription();

		String description = surveyMainCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			surveyMainCacheModel.description = null;
		}

		surveyMainCacheModel.epilog = getEpilog();

		String epilog = surveyMainCacheModel.epilog;

		if ((epilog != null) && (epilog.length() == 0)) {
			surveyMainCacheModel.epilog = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			surveyMainCacheModel.startDate = startDate.getTime();
		}
		else {
			surveyMainCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			surveyMainCacheModel.endDate = endDate.getTime();
		}
		else {
			surveyMainCacheModel.endDate = Long.MIN_VALUE;
		}

		surveyMainCacheModel.needAuth = getNeedAuth();

		surveyMainCacheModel.calculateScore = getCalculateScore();

		surveyMainCacheModel.viewAnswer = getViewAnswer();

		surveyMainCacheModel.color = getColor();

		String color = surveyMainCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			surveyMainCacheModel.color = null;
		}

		surveyMainCacheModel.creatorId = getCreatorId();

		surveyMainCacheModel.modifierId = getModifierId();

		surveyMainCacheModel.createDate = getCreateDate();

		surveyMainCacheModel.modifiedDate = getModifiedDate();

		return surveyMainCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{surveyMainId=");
		sb.append(getSurveyMainId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", epilog=");
		sb.append(getEpilog());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", needAuth=");
		sb.append(getNeedAuth());
		sb.append(", calculateScore=");
		sb.append(getCalculateScore());
		sb.append(", viewAnswer=");
		sb.append(getViewAnswer());
		sb.append(", color=");
		sb.append(getColor());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", modifierId=");
		sb.append(getModifierId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.lc.survey.model.SurveyMain");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>surveyMainId</column-name><column-value><![CDATA[");
		sb.append(getSurveyMainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>epilog</column-name><column-value><![CDATA[");
		sb.append(getEpilog());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>needAuth</column-name><column-value><![CDATA[");
		sb.append(getNeedAuth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calculateScore</column-name><column-value><![CDATA[");
		sb.append(getCalculateScore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewAnswer</column-name><column-value><![CDATA[");
		sb.append(getViewAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifierId</column-name><column-value><![CDATA[");
		sb.append(getModifierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SurveyMain.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SurveyMain.class
		};
	private long _surveyMainId;
	private String _title;
	private String _description;
	private String _epilog;
	private Date _startDate;
	private Date _endDate;
	private Boolean _needAuth;
	private Boolean _calculateScore;
	private Boolean _viewAnswer;
	private String _color;
	private long _creatorId;
	private long _originalCreatorId;
	private boolean _setOriginalCreatorId;
	private long _modifierId;
	private long _createDate;
	private long _modifiedDate;
	private long _columnBitmask;
	private SurveyMain _escapedModel;
}