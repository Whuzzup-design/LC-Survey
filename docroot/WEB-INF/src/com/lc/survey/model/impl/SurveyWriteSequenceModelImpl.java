/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lc.survey.model.impl;

import com.lc.survey.model.SurveyWriteSequence;
import com.lc.survey.model.SurveyWriteSequenceModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SurveyWriteSequence service. Represents a row in the &quot;lc_SurveyWriteSequence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lc.survey.model.SurveyWriteSequenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SurveyWriteSequenceImpl}.
 * </p>
 *
 * @author kevin
 * @see SurveyWriteSequenceImpl
 * @see com.lc.survey.model.SurveyWriteSequence
 * @see com.lc.survey.model.SurveyWriteSequenceModel
 * @generated
 */
public class SurveyWriteSequenceModelImpl extends BaseModelImpl<SurveyWriteSequence>
	implements SurveyWriteSequenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a survey write sequence model instance should use the {@link com.lc.survey.model.SurveyWriteSequence} interface instead.
	 */
	public static final String TABLE_NAME = "lc_SurveyWriteSequence";
	public static final Object[][] TABLE_COLUMNS = {
			{ "surveyWriteSequenceId", Types.BIGINT },
			{ "surveyWriterId", Types.BIGINT },
			{ "pageId", Types.BIGINT },
			{ "prePageId", Types.BIGINT },
			{ "isDirect", Types.BOOLEAN },
			{ "creatorId", Types.BIGINT },
			{ "createDate", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table lc_SurveyWriteSequence (surveyWriteSequenceId LONG not null primary key,surveyWriterId LONG,pageId LONG,prePageId LONG,isDirect BOOLEAN,creatorId LONG,createDate LONG)";
	public static final String TABLE_SQL_DROP = "drop table lc_SurveyWriteSequence";
	public static final String ORDER_BY_JPQL = " ORDER BY surveyWriteSequence.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY lc_SurveyWriteSequence.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lc.survey.model.SurveyWriteSequence"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lc.survey.model.SurveyWriteSequence"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lc.survey.model.SurveyWriteSequence"),
			true);
	public static long PAGEID_COLUMN_BITMASK = 1L;
	public static long SURVEYWRITERID_COLUMN_BITMASK = 2L;
	public static long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lc.survey.model.SurveyWriteSequence"));

	public SurveyWriteSequenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _surveyWriteSequenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSurveyWriteSequenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _surveyWriteSequenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SurveyWriteSequence.class;
	}

	@Override
	public String getModelClassName() {
		return SurveyWriteSequence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("surveyWriteSequenceId", getSurveyWriteSequenceId());
		attributes.put("surveyWriterId", getSurveyWriterId());
		attributes.put("pageId", getPageId());
		attributes.put("prePageId", getPrePageId());
		attributes.put("isDirect", getIsDirect());
		attributes.put("creatorId", getCreatorId());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long surveyWriteSequenceId = (Long)attributes.get(
				"surveyWriteSequenceId");

		if (surveyWriteSequenceId != null) {
			setSurveyWriteSequenceId(surveyWriteSequenceId);
		}

		Long surveyWriterId = (Long)attributes.get("surveyWriterId");

		if (surveyWriterId != null) {
			setSurveyWriterId(surveyWriterId);
		}

		Long pageId = (Long)attributes.get("pageId");

		if (pageId != null) {
			setPageId(pageId);
		}

		Long prePageId = (Long)attributes.get("prePageId");

		if (prePageId != null) {
			setPrePageId(prePageId);
		}

		Boolean isDirect = (Boolean)attributes.get("isDirect");

		if (isDirect != null) {
			setIsDirect(isDirect);
		}

		Long creatorId = (Long)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Long createDate = (Long)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@Override
	public long getSurveyWriteSequenceId() {
		return _surveyWriteSequenceId;
	}

	@Override
	public void setSurveyWriteSequenceId(long surveyWriteSequenceId) {
		_surveyWriteSequenceId = surveyWriteSequenceId;
	}

	@Override
	public long getSurveyWriterId() {
		return _surveyWriterId;
	}

	@Override
	public void setSurveyWriterId(long surveyWriterId) {
		_columnBitmask |= SURVEYWRITERID_COLUMN_BITMASK;

		if (!_setOriginalSurveyWriterId) {
			_setOriginalSurveyWriterId = true;

			_originalSurveyWriterId = _surveyWriterId;
		}

		_surveyWriterId = surveyWriterId;
	}

	public long getOriginalSurveyWriterId() {
		return _originalSurveyWriterId;
	}

	@Override
	public long getPageId() {
		return _pageId;
	}

	@Override
	public void setPageId(long pageId) {
		_columnBitmask |= PAGEID_COLUMN_BITMASK;

		if (!_setOriginalPageId) {
			_setOriginalPageId = true;

			_originalPageId = _pageId;
		}

		_pageId = pageId;
	}

	public long getOriginalPageId() {
		return _originalPageId;
	}

	@Override
	public long getPrePageId() {
		return _prePageId;
	}

	@Override
	public void setPrePageId(long prePageId) {
		_prePageId = prePageId;
	}

	@Override
	public Boolean getIsDirect() {
		return _isDirect;
	}

	@Override
	public void setIsDirect(Boolean isDirect) {
		_isDirect = isDirect;
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public long getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(long createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SurveyWriteSequence.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SurveyWriteSequence toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SurveyWriteSequence)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SurveyWriteSequenceImpl surveyWriteSequenceImpl = new SurveyWriteSequenceImpl();

		surveyWriteSequenceImpl.setSurveyWriteSequenceId(getSurveyWriteSequenceId());
		surveyWriteSequenceImpl.setSurveyWriterId(getSurveyWriterId());
		surveyWriteSequenceImpl.setPageId(getPageId());
		surveyWriteSequenceImpl.setPrePageId(getPrePageId());
		surveyWriteSequenceImpl.setIsDirect(getIsDirect());
		surveyWriteSequenceImpl.setCreatorId(getCreatorId());
		surveyWriteSequenceImpl.setCreateDate(getCreateDate());

		surveyWriteSequenceImpl.resetOriginalValues();

		return surveyWriteSequenceImpl;
	}

	@Override
	public int compareTo(SurveyWriteSequence surveyWriteSequence) {
		int value = 0;

		if (getCreateDate() < surveyWriteSequence.getCreateDate()) {
			value = -1;
		}
		else if (getCreateDate() > surveyWriteSequence.getCreateDate()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SurveyWriteSequence)) {
			return false;
		}

		SurveyWriteSequence surveyWriteSequence = (SurveyWriteSequence)obj;

		long primaryKey = surveyWriteSequence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SurveyWriteSequenceModelImpl surveyWriteSequenceModelImpl = this;

		surveyWriteSequenceModelImpl._originalSurveyWriterId = surveyWriteSequenceModelImpl._surveyWriterId;

		surveyWriteSequenceModelImpl._setOriginalSurveyWriterId = false;

		surveyWriteSequenceModelImpl._originalPageId = surveyWriteSequenceModelImpl._pageId;

		surveyWriteSequenceModelImpl._setOriginalPageId = false;

		surveyWriteSequenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SurveyWriteSequence> toCacheModel() {
		SurveyWriteSequenceCacheModel surveyWriteSequenceCacheModel = new SurveyWriteSequenceCacheModel();

		surveyWriteSequenceCacheModel.surveyWriteSequenceId = getSurveyWriteSequenceId();

		surveyWriteSequenceCacheModel.surveyWriterId = getSurveyWriterId();

		surveyWriteSequenceCacheModel.pageId = getPageId();

		surveyWriteSequenceCacheModel.prePageId = getPrePageId();

		surveyWriteSequenceCacheModel.isDirect = getIsDirect();

		surveyWriteSequenceCacheModel.creatorId = getCreatorId();

		surveyWriteSequenceCacheModel.createDate = getCreateDate();

		return surveyWriteSequenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{surveyWriteSequenceId=");
		sb.append(getSurveyWriteSequenceId());
		sb.append(", surveyWriterId=");
		sb.append(getSurveyWriterId());
		sb.append(", pageId=");
		sb.append(getPageId());
		sb.append(", prePageId=");
		sb.append(getPrePageId());
		sb.append(", isDirect=");
		sb.append(getIsDirect());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.lc.survey.model.SurveyWriteSequence");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>surveyWriteSequenceId</column-name><column-value><![CDATA[");
		sb.append(getSurveyWriteSequenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surveyWriterId</column-name><column-value><![CDATA[");
		sb.append(getSurveyWriterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pageId</column-name><column-value><![CDATA[");
		sb.append(getPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prePageId</column-name><column-value><![CDATA[");
		sb.append(getPrePageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDirect</column-name><column-value><![CDATA[");
		sb.append(getIsDirect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SurveyWriteSequence.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SurveyWriteSequence.class
		};
	private long _surveyWriteSequenceId;
	private long _surveyWriterId;
	private long _originalSurveyWriterId;
	private boolean _setOriginalSurveyWriterId;
	private long _pageId;
	private long _originalPageId;
	private boolean _setOriginalPageId;
	private long _prePageId;
	private Boolean _isDirect;
	private long _creatorId;
	private long _createDate;
	private long _columnBitmask;
	private SurveyWriteSequence _escapedModel;
}