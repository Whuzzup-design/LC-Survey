/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lc.survey.model.impl;

import com.lc.survey.model.SurveyQuestion;
import com.lc.survey.model.SurveyQuestionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SurveyQuestion service. Represents a row in the &quot;lc_SurveyQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lc.survey.model.SurveyQuestionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SurveyQuestionImpl}.
 * </p>
 *
 * @author kevin
 * @see SurveyQuestionImpl
 * @see com.lc.survey.model.SurveyQuestion
 * @see com.lc.survey.model.SurveyQuestionModel
 * @generated
 */
public class SurveyQuestionModelImpl extends BaseModelImpl<SurveyQuestion>
	implements SurveyQuestionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a survey question model instance should use the {@link com.lc.survey.model.SurveyQuestion} interface instead.
	 */
	public static final String TABLE_NAME = "lc_SurveyQuestion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "surveyQuestionId", Types.BIGINT },
			{ "surveyMainId", Types.BIGINT },
			{ "surveyPageId", Types.BIGINT },
			{ "parentId", Types.BIGINT },
			{ "no", Types.INTEGER },
			{ "question", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "isRequired", Types.BOOLEAN },
			{ "hasOther", Types.BOOLEAN },
			{ "optionDirect", Types.BOOLEAN },
			{ "points", Types.VARCHAR },
			{ "starsCount", Types.INTEGER },
			{ "uploadFileId", Types.BIGINT },
			{ "creatorId", Types.BIGINT },
			{ "modifierId", Types.BIGINT },
			{ "createDate", Types.BIGINT },
			{ "modifiedDate", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table lc_SurveyQuestion (surveyQuestionId LONG not null primary key,surveyMainId LONG,surveyPageId LONG,parentId LONG,no INTEGER,question VARCHAR(500) null,type_ VARCHAR(75) null,isRequired BOOLEAN,hasOther BOOLEAN,optionDirect BOOLEAN,points VARCHAR(75) null,starsCount INTEGER,uploadFileId LONG,creatorId LONG,modifierId LONG,createDate LONG,modifiedDate LONG)";
	public static final String TABLE_SQL_DROP = "drop table lc_SurveyQuestion";
	public static final String ORDER_BY_JPQL = " ORDER BY surveyQuestion.no ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lc_SurveyQuestion.no ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lc.survey.model.SurveyQuestion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lc.survey.model.SurveyQuestion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lc.survey.model.SurveyQuestion"),
			true);
	public static long PARENTID_COLUMN_BITMASK = 1L;
	public static long SURVEYMAINID_COLUMN_BITMASK = 2L;
	public static long SURVEYPAGEID_COLUMN_BITMASK = 4L;
	public static long TYPE_COLUMN_BITMASK = 8L;
	public static long NO_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.lc.survey.model.SurveyQuestion"));

	public SurveyQuestionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _surveyQuestionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSurveyQuestionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _surveyQuestionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SurveyQuestion.class;
	}

	@Override
	public String getModelClassName() {
		return SurveyQuestion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("surveyQuestionId", getSurveyQuestionId());
		attributes.put("surveyMainId", getSurveyMainId());
		attributes.put("surveyPageId", getSurveyPageId());
		attributes.put("parentId", getParentId());
		attributes.put("no", getNo());
		attributes.put("question", getQuestion());
		attributes.put("type", getType());
		attributes.put("isRequired", getIsRequired());
		attributes.put("hasOther", getHasOther());
		attributes.put("optionDirect", getOptionDirect());
		attributes.put("points", getPoints());
		attributes.put("starsCount", getStarsCount());
		attributes.put("uploadFileId", getUploadFileId());
		attributes.put("creatorId", getCreatorId());
		attributes.put("modifierId", getModifierId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long surveyQuestionId = (Long)attributes.get("surveyQuestionId");

		if (surveyQuestionId != null) {
			setSurveyQuestionId(surveyQuestionId);
		}

		Long surveyMainId = (Long)attributes.get("surveyMainId");

		if (surveyMainId != null) {
			setSurveyMainId(surveyMainId);
		}

		Long surveyPageId = (Long)attributes.get("surveyPageId");

		if (surveyPageId != null) {
			setSurveyPageId(surveyPageId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		Integer no = (Integer)attributes.get("no");

		if (no != null) {
			setNo(no);
		}

		String question = (String)attributes.get("question");

		if (question != null) {
			setQuestion(question);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Boolean isRequired = (Boolean)attributes.get("isRequired");

		if (isRequired != null) {
			setIsRequired(isRequired);
		}

		Boolean hasOther = (Boolean)attributes.get("hasOther");

		if (hasOther != null) {
			setHasOther(hasOther);
		}

		Boolean optionDirect = (Boolean)attributes.get("optionDirect");

		if (optionDirect != null) {
			setOptionDirect(optionDirect);
		}

		String points = (String)attributes.get("points");

		if (points != null) {
			setPoints(points);
		}

		Integer starsCount = (Integer)attributes.get("starsCount");

		if (starsCount != null) {
			setStarsCount(starsCount);
		}

		Long uploadFileId = (Long)attributes.get("uploadFileId");

		if (uploadFileId != null) {
			setUploadFileId(uploadFileId);
		}

		Long creatorId = (Long)attributes.get("creatorId");

		if (creatorId != null) {
			setCreatorId(creatorId);
		}

		Long modifierId = (Long)attributes.get("modifierId");

		if (modifierId != null) {
			setModifierId(modifierId);
		}

		Long createDate = (Long)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedDate = (Long)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getSurveyQuestionId() {
		return _surveyQuestionId;
	}

	@Override
	public void setSurveyQuestionId(long surveyQuestionId) {
		_surveyQuestionId = surveyQuestionId;
	}

	@Override
	public long getSurveyMainId() {
		return _surveyMainId;
	}

	@Override
	public void setSurveyMainId(long surveyMainId) {
		_columnBitmask |= SURVEYMAINID_COLUMN_BITMASK;

		if (!_setOriginalSurveyMainId) {
			_setOriginalSurveyMainId = true;

			_originalSurveyMainId = _surveyMainId;
		}

		_surveyMainId = surveyMainId;
	}

	public long getOriginalSurveyMainId() {
		return _originalSurveyMainId;
	}

	@Override
	public long getSurveyPageId() {
		return _surveyPageId;
	}

	@Override
	public void setSurveyPageId(long surveyPageId) {
		_columnBitmask |= SURVEYPAGEID_COLUMN_BITMASK;

		if (!_setOriginalSurveyPageId) {
			_setOriginalSurveyPageId = true;

			_originalSurveyPageId = _surveyPageId;
		}

		_surveyPageId = surveyPageId;
	}

	public long getOriginalSurveyPageId() {
		return _originalSurveyPageId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	@Override
	public int getNo() {
		return _no;
	}

	@Override
	public void setNo(int no) {
		_columnBitmask = -1L;

		_no = no;
	}

	@Override
	public String getQuestion() {
		if (_question == null) {
			return StringPool.BLANK;
		}
		else {
			return _question;
		}
	}

	@Override
	public void setQuestion(String question) {
		_question = question;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@Override
	public Boolean getIsRequired() {
		return _isRequired;
	}

	@Override
	public void setIsRequired(Boolean isRequired) {
		_isRequired = isRequired;
	}

	@Override
	public Boolean getHasOther() {
		return _hasOther;
	}

	@Override
	public void setHasOther(Boolean hasOther) {
		_hasOther = hasOther;
	}

	@Override
	public Boolean getOptionDirect() {
		return _optionDirect;
	}

	@Override
	public void setOptionDirect(Boolean optionDirect) {
		_optionDirect = optionDirect;
	}

	@Override
	public String getPoints() {
		if (_points == null) {
			return StringPool.BLANK;
		}
		else {
			return _points;
		}
	}

	@Override
	public void setPoints(String points) {
		_points = points;
	}

	@Override
	public int getStarsCount() {
		return _starsCount;
	}

	@Override
	public void setStarsCount(int starsCount) {
		_starsCount = starsCount;
	}

	@Override
	public long getUploadFileId() {
		return _uploadFileId;
	}

	@Override
	public void setUploadFileId(long uploadFileId) {
		_uploadFileId = uploadFileId;
	}

	@Override
	public long getCreatorId() {
		return _creatorId;
	}

	@Override
	public void setCreatorId(long creatorId) {
		_creatorId = creatorId;
	}

	@Override
	public long getModifierId() {
		return _modifierId;
	}

	@Override
	public void setModifierId(long modifierId) {
		_modifierId = modifierId;
	}

	@Override
	public long getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(long createDate) {
		_createDate = createDate;
	}

	@Override
	public long getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(long modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SurveyQuestion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SurveyQuestion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SurveyQuestion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SurveyQuestionImpl surveyQuestionImpl = new SurveyQuestionImpl();

		surveyQuestionImpl.setSurveyQuestionId(getSurveyQuestionId());
		surveyQuestionImpl.setSurveyMainId(getSurveyMainId());
		surveyQuestionImpl.setSurveyPageId(getSurveyPageId());
		surveyQuestionImpl.setParentId(getParentId());
		surveyQuestionImpl.setNo(getNo());
		surveyQuestionImpl.setQuestion(getQuestion());
		surveyQuestionImpl.setType(getType());
		surveyQuestionImpl.setIsRequired(getIsRequired());
		surveyQuestionImpl.setHasOther(getHasOther());
		surveyQuestionImpl.setOptionDirect(getOptionDirect());
		surveyQuestionImpl.setPoints(getPoints());
		surveyQuestionImpl.setStarsCount(getStarsCount());
		surveyQuestionImpl.setUploadFileId(getUploadFileId());
		surveyQuestionImpl.setCreatorId(getCreatorId());
		surveyQuestionImpl.setModifierId(getModifierId());
		surveyQuestionImpl.setCreateDate(getCreateDate());
		surveyQuestionImpl.setModifiedDate(getModifiedDate());

		surveyQuestionImpl.resetOriginalValues();

		return surveyQuestionImpl;
	}

	@Override
	public int compareTo(SurveyQuestion surveyQuestion) {
		int value = 0;

		if (getNo() < surveyQuestion.getNo()) {
			value = -1;
		}
		else if (getNo() > surveyQuestion.getNo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SurveyQuestion)) {
			return false;
		}

		SurveyQuestion surveyQuestion = (SurveyQuestion)obj;

		long primaryKey = surveyQuestion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SurveyQuestionModelImpl surveyQuestionModelImpl = this;

		surveyQuestionModelImpl._originalSurveyMainId = surveyQuestionModelImpl._surveyMainId;

		surveyQuestionModelImpl._setOriginalSurveyMainId = false;

		surveyQuestionModelImpl._originalSurveyPageId = surveyQuestionModelImpl._surveyPageId;

		surveyQuestionModelImpl._setOriginalSurveyPageId = false;

		surveyQuestionModelImpl._originalParentId = surveyQuestionModelImpl._parentId;

		surveyQuestionModelImpl._setOriginalParentId = false;

		surveyQuestionModelImpl._originalType = surveyQuestionModelImpl._type;

		surveyQuestionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SurveyQuestion> toCacheModel() {
		SurveyQuestionCacheModel surveyQuestionCacheModel = new SurveyQuestionCacheModel();

		surveyQuestionCacheModel.surveyQuestionId = getSurveyQuestionId();

		surveyQuestionCacheModel.surveyMainId = getSurveyMainId();

		surveyQuestionCacheModel.surveyPageId = getSurveyPageId();

		surveyQuestionCacheModel.parentId = getParentId();

		surveyQuestionCacheModel.no = getNo();

		surveyQuestionCacheModel.question = getQuestion();

		String question = surveyQuestionCacheModel.question;

		if ((question != null) && (question.length() == 0)) {
			surveyQuestionCacheModel.question = null;
		}

		surveyQuestionCacheModel.type = getType();

		String type = surveyQuestionCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			surveyQuestionCacheModel.type = null;
		}

		surveyQuestionCacheModel.isRequired = getIsRequired();

		surveyQuestionCacheModel.hasOther = getHasOther();

		surveyQuestionCacheModel.optionDirect = getOptionDirect();

		surveyQuestionCacheModel.points = getPoints();

		String points = surveyQuestionCacheModel.points;

		if ((points != null) && (points.length() == 0)) {
			surveyQuestionCacheModel.points = null;
		}

		surveyQuestionCacheModel.starsCount = getStarsCount();

		surveyQuestionCacheModel.uploadFileId = getUploadFileId();

		surveyQuestionCacheModel.creatorId = getCreatorId();

		surveyQuestionCacheModel.modifierId = getModifierId();

		surveyQuestionCacheModel.createDate = getCreateDate();

		surveyQuestionCacheModel.modifiedDate = getModifiedDate();

		return surveyQuestionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{surveyQuestionId=");
		sb.append(getSurveyQuestionId());
		sb.append(", surveyMainId=");
		sb.append(getSurveyMainId());
		sb.append(", surveyPageId=");
		sb.append(getSurveyPageId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", no=");
		sb.append(getNo());
		sb.append(", question=");
		sb.append(getQuestion());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", isRequired=");
		sb.append(getIsRequired());
		sb.append(", hasOther=");
		sb.append(getHasOther());
		sb.append(", optionDirect=");
		sb.append(getOptionDirect());
		sb.append(", points=");
		sb.append(getPoints());
		sb.append(", starsCount=");
		sb.append(getStarsCount());
		sb.append(", uploadFileId=");
		sb.append(getUploadFileId());
		sb.append(", creatorId=");
		sb.append(getCreatorId());
		sb.append(", modifierId=");
		sb.append(getModifierId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.lc.survey.model.SurveyQuestion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>surveyQuestionId</column-name><column-value><![CDATA[");
		sb.append(getSurveyQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surveyMainId</column-name><column-value><![CDATA[");
		sb.append(getSurveyMainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surveyPageId</column-name><column-value><![CDATA[");
		sb.append(getSurveyPageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>no</column-name><column-value><![CDATA[");
		sb.append(getNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question</column-name><column-value><![CDATA[");
		sb.append(getQuestion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isRequired</column-name><column-value><![CDATA[");
		sb.append(getIsRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hasOther</column-name><column-value><![CDATA[");
		sb.append(getHasOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>optionDirect</column-name><column-value><![CDATA[");
		sb.append(getOptionDirect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>points</column-name><column-value><![CDATA[");
		sb.append(getPoints());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>starsCount</column-name><column-value><![CDATA[");
		sb.append(getStarsCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadFileId</column-name><column-value><![CDATA[");
		sb.append(getUploadFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorId</column-name><column-value><![CDATA[");
		sb.append(getCreatorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifierId</column-name><column-value><![CDATA[");
		sb.append(getModifierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SurveyQuestion.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SurveyQuestion.class
		};
	private long _surveyQuestionId;
	private long _surveyMainId;
	private long _originalSurveyMainId;
	private boolean _setOriginalSurveyMainId;
	private long _surveyPageId;
	private long _originalSurveyPageId;
	private boolean _setOriginalSurveyPageId;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private int _no;
	private String _question;
	private String _type;
	private String _originalType;
	private Boolean _isRequired;
	private Boolean _hasOther;
	private Boolean _optionDirect;
	private String _points;
	private int _starsCount;
	private long _uploadFileId;
	private long _creatorId;
	private long _modifierId;
	private long _createDate;
	private long _modifiedDate;
	private long _columnBitmask;
	private SurveyQuestion _escapedModel;
}